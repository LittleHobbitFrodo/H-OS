#!/usr/bin/fish

if test ! (basename (pwd)) = "H-OS"
	#	change dir to root
	echo run in project root directory
	exit
end

set include /usr/include

set compiler_arguments ""

set ccompiler "none"
set cppcompiler "none"

set DEBUG "0"

for i in $argv
  switch $i
    case "debug"
      set DEBUG 1
    case "-ignore-firmware-type"
      set compiler_arguments $compiler_arguments -DIGNORE_FIRMWARE_TYPE=true
  end
end

for i in $PATH
	if test -e "$i/x86_64-elf-gcc"
		set ccompiler "$i/x86_64-elf-gcc"
		echo using $ccompiler as C compiler
		break
	end
end

if test $ccompiler = "none"
	if test (uname -m) = x86_64 -o (uname -m) = amd64
		for i in $PATH
			if test -e "$i/gcc"
				set ccompiler "$i/gcc"
				echo using $ccompiler as C compiler
				break
			end
		end
	else
		echo ERROR: C cross compiler was not found, please install x86_64-elf-gcc package
		exit
	end	
end

mkdir tmp/kernel -p
	#	create temporary directory for elfs

set acompiler "none"

for i in $PATH
  if test -e "$i/nasm"
    set acompiler "$i/nasm"
    echo using $acompiler as assembly compiler
  end
end

if test $acompiler = "none"
  if test (uname -m) != x86_64 -a (uname -m) != amd64
    echo ERROR: assembly cross compiler was not found, please install x86_64-elf-gcc package
    exit
  end
end

for i in (find ./kernel/src/ -name "*.asm")

	set bname (basename $i)
	set bname (string replace ".asm" ".o" -- $bname)

  if test $DEBUG = "0"
	  $acompiler -f elf64 -o "./tmp/kernel/$bname" $i
  else
    $acompiler -f elf64 -g -F dwarf -o "./tmp/kernel/$bname" $i
  end
end

set global_gcc_params -I$stdpath -ffreestanding -fPIE -nostdlib -nostartfiles \
-march=x86-64 -mgeneral-regs-only -Wall -Wextra -Werror \
"-DKERNEL_VERSION=\"$(cat ./kernel/version)\"" "-DKERNEL_BUILD_TIME=\"$(date +"%m-%d-%Y")\"" \
"-DKERNEL_NAME=\"H-OS CORE-$(cat ./kernel/version)\"" "-DKERNEL_BUILD_GUID=\"$(uuidgen)\"" -masm=intel \
-fno-exceptions -fPIE -m64 -c

if test $DEBUG = "0"
  $ccompiler $global_gcc_params -finline-functions -finline-limit=1000 -fno-stack-protector -fno-stack-check \
  -fno-lto -mno-mmx -mno-sse -mno-sse2 -mno-red-zone "./kernel/src/kernel.c" -o "./tmp/kernel/kernel.o" -O3 $compiler_arguments

else
  $ccompiler $global_gcc_params -fno-inline -g -O0 -fno-omit-frame-pointer -DKERNEL_DEBUG \
  "./kernel/src/kernel.c" -o "./tmp/kernel/kernel.o" $compiler_arguments
end

if test ! -e "./tmp/kernel/kernel.o"
  echo ERROR: kernel compilation failure
  exit
end